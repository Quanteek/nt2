[part Getting Started
    [quickbook 1.5]
        [copyright 2003 - 2011 LASMEA UMR 6602 CNRS/Univ. Blaise Pascal]
        [copyright 2009 - 2011 LRI UMR 8623 CNRS/Univ Paris Sud XI]
    [source-mode c++]
]

[section Getting __NT2__]

Installers are available for testing, but are not available on any regular
website yet.

__NT2__ being still in an active development stage, the best thing to do is
to get a copy of the source from the [@http://git-scm.com/ Git] repository,
hosted on [@https://github.com/MetaScale/nt2/ GitHub].

Consult the [@http://progit.org/book/ Pro Git book] for information on how to
set up and use Git.

If you wish to collaborate to __NT2__, create a GitHub account and consult
the [@http://help.github.com/set-up-git-redirect GitHub documentation]
on how to integrate it with your Git installation.

[endsect]

[section __NT2__ binary and source layouts]

The layout of the __NT2__ distribution can be vastly different depending
on whether you're looking at the source distribution or the binary distribution.

The essential difference is that the source distribution is divided into a collection of modules,
which can each add headers to the include path, library sources to be built, tests, etc.

The binary distribution, on top of providing the libraries in a built binary form, also contains files
that are automatically generated when the build system is configured, and has all module-specific files
flattened into a module-less tree.

[table Binary layout
    [[Path]        [Description]]
    [[=nt2/cmake=]   [CMake modules for __NT2__ usage, directory suitable to add to your `CMAKE_MODULE_PATH`]]
    [[=nt2/doc=]     [__NT2__ HTML documentation]]
    [[=nt2/include=] [__NT2__ headers, directory suitable to add to your include path]]
    [[=nt2/lib=]     [__NT2__ library binaries, directory suitable to add to your linker path]]
    [[=nt2/modules=] [Files used by __NT2__ to identity installed modules and their associated]]
    [[=nt2/tools=]   [Programs that are used to manage a __NT2__ setup]]
]

[table Source layout
    [[Path]          [Description]]
    [[=nt2/CMakeLists.txt=] [__NT2__ CMake super-project]]
    [[=nt2/cmake=]   [Global CMake modules for __NT2__ usage]]
    [[=nt2/doc=]     [Global documentation source]]
    [[=nt2/modules=] [Collection of modules]]
    [[----] [----]]
    [[[^nt2/modules/[~foo]]] [Module [~foo]]]
    [[[^nt2/modules/[~foo]/CMakeLists.txt]] [Standalone CMake project for module [~foo]]]
    [[[^nt2/modules/[~foo]/bench]] [Benchmarks for module [~foo]]]
    [[[^nt2/modules/[~foo]/cmake]] [CMake modules specific to module [~foo]]]
    [[[^nt2/modules/[~foo]/cover]] [Cover tests for module [~foo]]]
    [[[^nt2/modules/[~foo]/exhaustive]] [Exhaustive tests for module [~foo]]]
    [[[^nt2/modules/[~foo]/include]] [Headers specific to module [~foo], suitable to add to your include path]]
    [[[^nt2/modules/[~foo]/src]] [Source files specific to module [~foo]]]
    [[[^nt2/modules/[~foo]/unit]] [Unit tests for module [~foo]]]
    [[----] [----]]
    [[[^nt2/modules/[~bar]/[~baz]]] [Module [~bar].[~baz] ([~bar] must not be a module)]]
    [[=nt2/scripts=] [[@http://www.python.org/ Python] and shell scripts used in the development of __NT2__]]
    [[=nt2/tools=]   [Source of programs that are used to manage a __NT2__ setup]]
]

[endsect]

[section Using __NT2__]

The binary layout of __NT2__ is normally needed to use the library in
your project.

However, if you happen to use CMake to build your project, if it also possible to
use either of the binary and source distribution, with the library being built transparently
in the latter case.

If you use another build tool, you will have to get the binary distribution, or generate
it from the source one.

[section Using the __NT2__ binary distribution]

To use the binary distribution, simply add
=nt2/include= to the include path and link with the libraries you want
from =nt2/lib=.

Note that if you choose to use the shared libraries, you'll also need to
define the `NT2_DYN_LINK` or `BOOST_SIMD_DYN_LINK` macros.

Using the SIMD features of __NT2__ can require enabling them with the
appropriate compiler flags. Certains compilers have no mechanism that
can be used to introspect what type of SIMD to generate, in which case
you must instruct the library the correct one using [^BOOST_SIMD_HAS_[~XXX]_SUPPORT]
with [~XXX] the name of the SIMD extension.

[endsect] [/ Using binary]

[section Using __NT2__ within a CMake project]
You can use the `FindNT2` CMake module to use __NT2__ in your CMake-enabled
project.

To do so, set the `CMAKE_MODULE_PATH` variable to contain the path to either
the source or binary root of __NT2__. This variable is a list of directories
used by CMake to lookup files to include.

Then use the `find_package` command to find `NT2`; you can specify the list
of modules you want with the `COMPONENTS` option: it defaults to all that were
found.

You may aid `FindNT2` by defining a `NT2_ROOT`, `NT2_INCLUDE_ROOT` and `NT2_LIBRARY_ROOT`
for binary installations, or `NT2_SOURCE_ROOT` for the source distribution.
Those variables can also be environment variables.

Calling `find_package` will define various variables that can then be used to set-up
the project that wants to use __NT2__.

The __NT2__ source provides a /sandbox/ mini-project that demonstrates how to use
the source; below is another example:

[teletype]
``
project(myproject)

# Allow CMake to find NT2
set(NT2_SOURCE_ROOT /path/to/nt2/source)
list(APPEND CMAKE_MODULE_PATH ${NT2_SOURCE_ROOT}/cmake)

# Ask to find the arithmetic and trigonometric modules,
# emit a fatal error if not found
find_package(NT2 COMPONENTS arithmetic trigonometric REQUIRED)

# Set the environment to use the include directories, libraries
# and compiler flags required for the NT2 modules requested
include_directories(${NT2_INCLUDE_DIR})
link_libraries(${NT2_LIBRARIES})
add_definitions(${NT2_FLAGS})

# Build an executable using that environment
add_executable(myexe mysource.cpp)
``

[note The eight last variables from the
[link getting_started.building___nt2__.configuration CMake configuration section]
may also affect your usage of __NT2__.]

[endsect]

[endsect] [/ Using]

[section Building __NT2__]

__NT2__ uses [@http://www.cmake.org/ CMake] as its build system.

CMake is actually a meta-build system, in the sense that it generates files
for another build system (Make, NMake, Visual Studio projects, etc.).

When you run CMake with a particular generator, it will configure the __NT2__
project before generating the build files for the chosen generator.
You may then edit the base configuration to change compiler
settings, where to find the external libraries, or the __NT2__ options below,
then re-generate.

CMake supports /out-of-source/ builds which are *heavily recommended*.
They allow you to keep your build tree entirely separate from your source tree,
making it possible to have several build configurations against the same source
and to keep the source clean of any generated files.

[tip When developing software on remote machines with a relatively fast network,
it can be interesting to put the source on a remote network directory
shared across all machines, with the build directories on your local disk.
You may also want to encode the name of the various configurations in the names of
your build directories.]

[section Requirements]

__NT2__ requires a good C++ compiler and recent headers from the [@http://www.boost.org/ Boost C++ Libraries]
(library binaries are not required).

Here is the list of systems known to be working:

* Linux, Mac OS X, Windows XP+ and Windows 7 x64
* x86, x86-64, PPC, PPC64, Cell SPU
* GCC 4.3+, Clang 2.9+, MSVC9+
* CMake 2.6+
* Boost 1.46+

Additional software is required to generate unit tests (Python 2.6+) and to build
documentation (Doxygen, the Boostbook toolchain and Quickbook).

[endsect]

[section Configuration]

Running CMake is referred to as the ["configuration step].
Below is the table of the various variables that affect the __NT2__
super-project configuration.

[table CMake Configuration Options
    [[Option name] [Description]]
    [[=NT2_MODULES=]   [List of __NT2__ modules to load (defaults to all modules present)]]
    [[=NT2_MODULES_EXTRA=]   [List of extra __NT2__ modules to load]]
    [[=NT2_MODULES_BLACKLIST=]  [List of modules present that should not be loaded]]
    [[=NT2_WITH_TESTS=] [Whether tests and benchmarks should be enabled (defaults to =ON= on Makefile generators)]]
    [[=NT2_WITH_TESTS_FULL=] [Whether tests and benchmarks should each generate one target instead of the default of having them aggregated into a couple of targets per module]]
    [[=NT2_WITH_TESTS_BENCH=] [Whether benchmarks should behave like tests and register themselves to the test driver]]
    [[=NT2_WITH_TESTS_COVER=] [Whether cover and exhaustive tests should be enabled]]
    [[=NT2_USE_FOLDERS=] [Whether to use folders for the Visual Studio generator. Requires Visual Studio professional edition.]]
    [[=NT2_EXTRA_WARNINGS=]    [Enable extra verbose warnings (will eventually become the default)]]
    [[=NT2_FIND_REPOSITORIES=] [List of Git repositories in which to look for extra modules]]
    [[=NT2_SIMD_FLAGS=] [Compiler flags to pass to the compiler for SIMD code generation. Defaults to best set of flags detected on host system]]
    [[=BOOST_ROOT=] [Location of Boost, if not in the standard include directories]]
    [[=CMAKE_BUILD_TYPE=] [Whether to build for Release or Debug. Does not affect build systems that support multiple configurations in a single project, like Visual Studio. Defaults to Release]]
    [[=BUILD_SHARED_LIBS=] [Whether to build shared libraries instead of static ones. You may also control this in a per-module fashion by appropriately defining [^NT2_[~MODULE]_USE_STATIC_LIBS]]]
    [[=CMAKE_INSTALL_PREFIX=] [Directory in which __NT2__ will be put when installing. Defaults to [^/usr/local] on Linux, and [^C:\Program Files] on Windows]]
    [[=WAVE_EXECUTABLE=] [Path to the command-line driver for [@http://www.boost.org/doc/libs/release/libs/wave/index.html Wave], used to preprocess some files]]
]

[endsect] [/ Configuration]

[section Building]

Once __NT2__ has been configured, you may then build various targets,
in a way that depends on the generator you've chosen.

If you chose the Visual Studio generator, you can open the generated =NT2.sln=
file, each target will be one project within the solution. You could also use =msbuild= to
attack the =NT2.sln= or the per-target =vcxproj= files.

If you chose the Makefile generator, you may do [^make [~target]] to build the target [~target].
[^make help] will list all available targets.

The default target, invoked by running =make= or by building =ALL_BUILD= or =all=, builds
all __NT2__ sources into libraries.

[caution If you pull new commits from Git, you may have to re-configure before you can build again.
This is due to __NT2__ generating some files at the end of the configuration step.
Re-configuring, however, unfortunately invalidates all targets, so a better solution will eventually
be implemented.]

[table Buildable targets
    [[Target name] [Description]]
    [[=all= or =BUILD_ALL=]    [Builds all libraries]]
    [[[^[~name]]]   [Builds a library, where [~name] is the name of a library without the =lib= prefix]]
    [[=preprocess=] [Re-generate the preprocessed versions of certain headers. Requires the command-line driver from Wave to have been detected on the system]]
    [[=doc=] [Builds HTML documentation]]
    [[=install=] [Copies files to =CMAKE_INSTALL_PREFIX=, may require administrator rights]]
    [[=package=] [Generate zips and installers for the binary version of __NT2__]]
    [[=examples=] [Builds all examples]]
    [[=bench=]   [Builds all benchmarks (if enabled)]]
    [[=unit=] [Builds all unit tests (if enabled)]]
    [[=cover=] [Builds all cover tests (if enabled)]]
    [[=exhaustive=] [Builds all exhaustive tests (if enabled)]]
    [[[^[~module].unit]] [Builds all unit tests from module [~module]]]
    [[[^[~module].[~suite].unit]] [Builds test suite [~suite] of module [~module] (similar targets exist for bench, cover, etc.) ]]
    [[=test= or =RUN_TESTS=] [Runs all tests visible from current directory; they must have previously been built]]
]

Unit tests executable are copied to =unit/= in the build directory, cover tests to =cover/= etc.

If using Makefile generators, you also get the [^[~target]/fast] variants for each target [~target],
which avoids testing for dependencies (which can provide a significant speedup if =NT2_WITH_TESTS_FULL=
is set to =ON=).

With those generators, you can also build [^[~file].i], and [^[~file].o], where [~file] is the name of a
C++ source file without the =.cpp= extension, which is is quite interesting to build a single test when
=NT2_WITH_TESTS_FULL= is set to =OFF=. Those targets however require to be in the working directory
corresponding to that of the sources (e.g. `cd modules/arithmetic/unit/scalar && make fma.o`).

[endsect] [/ Building]

[section Testing]

__NT2__ uses CTest to manages its test suites, so you can either use the
=test= or =RUN_TESTS= targets to run all tests, or you can use the =ctest=
command to do so which allows finer-grain test selection using regular expressions.

Indeed,

    ctest -R ^``[~module]``.*.unit$

may be used to run all unit tests from module [~module].

[endsect] [/ Testing]

[endsect] [/ Building __NT2__]
